// generated by jsonenums -type=ContestStatus; DO NOT EDIT

package models

import (
	"encoding/json"
	"fmt"
)

var (
	_ContestStatusNameToValue = map[string]ContestStatus{
		"Undefined":       Undefined,
		"ContestClosed":   ContestClosed,
		"ContestOpen":     ContestOpen,
		"ContestFinished": ContestFinished,
	}

	_ContestStatusValueToName = map[ContestStatus]string{
		Undefined:       "Undefined",
		ContestClosed:   "ContestClosed",
		ContestOpen:     "ContestOpen",
		ContestFinished: "ContestFinished",
	}
)

func init() {
	var v ContestStatus
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_ContestStatusNameToValue = map[string]ContestStatus{
			interface{}(Undefined).(fmt.Stringer).String():       Undefined,
			interface{}(ContestClosed).(fmt.Stringer).String():   ContestClosed,
			interface{}(ContestOpen).(fmt.Stringer).String():     ContestOpen,
			interface{}(ContestFinished).(fmt.Stringer).String(): ContestFinished,
		}
	}
}

// MarshalJSON is generated so ContestStatus satisfies json.Marshaler.
func (r ContestStatus) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _ContestStatusValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid ContestStatus: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so ContestStatus satisfies json.Unmarshaler.
func (r *ContestStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ContestStatus should be a string, got %s", data)
	}
	v, ok := _ContestStatusNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid ContestStatus %q", s)
	}
	*r = v
	return nil
}
